{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst fsScandir = require(\"@nodelib/fs.scandir\");\n\nconst common = require(\"./common\");\n\nconst reader_1 = require(\"./reader\");\n\nclass SyncReader extends reader_1.default {\n  constructor() {\n    super(...arguments);\n    this._scandir = fsScandir.scandirSync;\n    this._storage = [];\n    this._queue = new Set();\n  }\n\n  read() {\n    this._pushToQueue(this._root, this._settings.basePath);\n\n    this._handleQueue();\n\n    return this._storage;\n  }\n\n  _pushToQueue(directory, base) {\n    this._queue.add({\n      directory,\n      base\n    });\n  }\n\n  _handleQueue() {\n    for (const item of this._queue.values()) {\n      this._handleDirectory(item.directory, item.base);\n    }\n  }\n\n  _handleDirectory(directory, base) {\n    try {\n      const entries = this._scandir(directory, this._settings.fsScandirSettings);\n\n      for (const entry of entries) {\n        this._handleEntry(entry, base);\n      }\n    } catch (error) {\n      this._handleError(error);\n    }\n  }\n\n  _handleError(error) {\n    if (!common.isFatalError(this._settings, error)) {\n      return;\n    }\n\n    throw error;\n  }\n\n  _handleEntry(entry, base) {\n    const fullpath = entry.path;\n\n    if (base !== undefined) {\n      entry.path = common.joinPathSegments(base, entry.name, this._settings.pathSegmentSeparator);\n    }\n\n    if (common.isAppliedFilter(this._settings.entryFilter, entry)) {\n      this._pushToStorage(entry);\n    }\n\n    if (entry.dirent.isDirectory() && common.isAppliedFilter(this._settings.deepFilter, entry)) {\n      this._pushToQueue(fullpath, base === undefined ? undefined : entry.path);\n    }\n  }\n\n  _pushToStorage(entry) {\n    this._storage.push(entry);\n  }\n\n}\n\nexports.default = SyncReader;","map":{"version":3,"sources":["C:/Users/DELL/Desktop/Trainig/MERN-stack/client/node_modules/@nodelib/fs.walk/out/readers/sync.js"],"names":["Object","defineProperty","exports","value","fsScandir","require","common","reader_1","SyncReader","default","constructor","arguments","_scandir","scandirSync","_storage","_queue","Set","read","_pushToQueue","_root","_settings","basePath","_handleQueue","directory","base","add","item","values","_handleDirectory","entries","fsScandirSettings","entry","_handleEntry","error","_handleError","isFatalError","fullpath","path","undefined","joinPathSegments","name","pathSegmentSeparator","isAppliedFilter","entryFilter","_pushToStorage","dirent","isDirectory","deepFilter","push"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AACA,MAAMC,SAAS,GAAGC,OAAO,CAAC,qBAAD,CAAzB;;AACA,MAAMC,MAAM,GAAGD,OAAO,CAAC,UAAD,CAAtB;;AACA,MAAME,QAAQ,GAAGF,OAAO,CAAC,UAAD,CAAxB;;AACA,MAAMG,UAAN,SAAyBD,QAAQ,CAACE,OAAlC,CAA0C;AACtCC,EAAAA,WAAW,GAAG;AACV,UAAM,GAAGC,SAAT;AACA,SAAKC,QAAL,GAAgBR,SAAS,CAACS,WAA1B;AACA,SAAKC,QAAL,GAAgB,EAAhB;AACA,SAAKC,MAAL,GAAc,IAAIC,GAAJ,EAAd;AACH;;AACDC,EAAAA,IAAI,GAAG;AACH,SAAKC,YAAL,CAAkB,KAAKC,KAAvB,EAA8B,KAAKC,SAAL,CAAeC,QAA7C;;AACA,SAAKC,YAAL;;AACA,WAAO,KAAKR,QAAZ;AACH;;AACDI,EAAAA,YAAY,CAACK,SAAD,EAAYC,IAAZ,EAAkB;AAC1B,SAAKT,MAAL,CAAYU,GAAZ,CAAgB;AAAEF,MAAAA,SAAF;AAAaC,MAAAA;AAAb,KAAhB;AACH;;AACDF,EAAAA,YAAY,GAAG;AACX,SAAK,MAAMI,IAAX,IAAmB,KAAKX,MAAL,CAAYY,MAAZ,EAAnB,EAAyC;AACrC,WAAKC,gBAAL,CAAsBF,IAAI,CAACH,SAA3B,EAAsCG,IAAI,CAACF,IAA3C;AACH;AACJ;;AACDI,EAAAA,gBAAgB,CAACL,SAAD,EAAYC,IAAZ,EAAkB;AAC9B,QAAI;AACA,YAAMK,OAAO,GAAG,KAAKjB,QAAL,CAAcW,SAAd,EAAyB,KAAKH,SAAL,CAAeU,iBAAxC,CAAhB;;AACA,WAAK,MAAMC,KAAX,IAAoBF,OAApB,EAA6B;AACzB,aAAKG,YAAL,CAAkBD,KAAlB,EAAyBP,IAAzB;AACH;AACJ,KALD,CAMA,OAAOS,KAAP,EAAc;AACV,WAAKC,YAAL,CAAkBD,KAAlB;AACH;AACJ;;AACDC,EAAAA,YAAY,CAACD,KAAD,EAAQ;AAChB,QAAI,CAAC3B,MAAM,CAAC6B,YAAP,CAAoB,KAAKf,SAAzB,EAAoCa,KAApC,CAAL,EAAiD;AAC7C;AACH;;AACD,UAAMA,KAAN;AACH;;AACDD,EAAAA,YAAY,CAACD,KAAD,EAAQP,IAAR,EAAc;AACtB,UAAMY,QAAQ,GAAGL,KAAK,CAACM,IAAvB;;AACA,QAAIb,IAAI,KAAKc,SAAb,EAAwB;AACpBP,MAAAA,KAAK,CAACM,IAAN,GAAa/B,MAAM,CAACiC,gBAAP,CAAwBf,IAAxB,EAA8BO,KAAK,CAACS,IAApC,EAA0C,KAAKpB,SAAL,CAAeqB,oBAAzD,CAAb;AACH;;AACD,QAAInC,MAAM,CAACoC,eAAP,CAAuB,KAAKtB,SAAL,CAAeuB,WAAtC,EAAmDZ,KAAnD,CAAJ,EAA+D;AAC3D,WAAKa,cAAL,CAAoBb,KAApB;AACH;;AACD,QAAIA,KAAK,CAACc,MAAN,CAAaC,WAAb,MAA8BxC,MAAM,CAACoC,eAAP,CAAuB,KAAKtB,SAAL,CAAe2B,UAAtC,EAAkDhB,KAAlD,CAAlC,EAA4F;AACxF,WAAKb,YAAL,CAAkBkB,QAAlB,EAA4BZ,IAAI,KAAKc,SAAT,GAAqBA,SAArB,GAAiCP,KAAK,CAACM,IAAnE;AACH;AACJ;;AACDO,EAAAA,cAAc,CAACb,KAAD,EAAQ;AAClB,SAAKjB,QAAL,CAAckC,IAAd,CAAmBjB,KAAnB;AACH;;AAnDqC;;AAqD1C7B,OAAO,CAACO,OAAR,GAAkBD,UAAlB","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst fsScandir = require(\"@nodelib/fs.scandir\");\nconst common = require(\"./common\");\nconst reader_1 = require(\"./reader\");\nclass SyncReader extends reader_1.default {\n    constructor() {\n        super(...arguments);\n        this._scandir = fsScandir.scandirSync;\n        this._storage = [];\n        this._queue = new Set();\n    }\n    read() {\n        this._pushToQueue(this._root, this._settings.basePath);\n        this._handleQueue();\n        return this._storage;\n    }\n    _pushToQueue(directory, base) {\n        this._queue.add({ directory, base });\n    }\n    _handleQueue() {\n        for (const item of this._queue.values()) {\n            this._handleDirectory(item.directory, item.base);\n        }\n    }\n    _handleDirectory(directory, base) {\n        try {\n            const entries = this._scandir(directory, this._settings.fsScandirSettings);\n            for (const entry of entries) {\n                this._handleEntry(entry, base);\n            }\n        }\n        catch (error) {\n            this._handleError(error);\n        }\n    }\n    _handleError(error) {\n        if (!common.isFatalError(this._settings, error)) {\n            return;\n        }\n        throw error;\n    }\n    _handleEntry(entry, base) {\n        const fullpath = entry.path;\n        if (base !== undefined) {\n            entry.path = common.joinPathSegments(base, entry.name, this._settings.pathSegmentSeparator);\n        }\n        if (common.isAppliedFilter(this._settings.entryFilter, entry)) {\n            this._pushToStorage(entry);\n        }\n        if (entry.dirent.isDirectory() && common.isAppliedFilter(this._settings.deepFilter, entry)) {\n            this._pushToQueue(fullpath, base === undefined ? undefined : entry.path);\n        }\n    }\n    _pushToStorage(entry) {\n        this._storage.push(entry);\n    }\n}\nexports.default = SyncReader;\n"]},"metadata":{},"sourceType":"script"}