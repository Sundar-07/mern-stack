{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.readdir = exports.readdirWithFileTypes = exports.read = void 0;\n\nconst fsStat = require(\"@nodelib/fs.stat\");\n\nconst rpl = require(\"run-parallel\");\n\nconst constants_1 = require(\"../constants\");\n\nconst utils = require(\"../utils\");\n\nconst common = require(\"./common\");\n\nfunction read(directory, settings, callback) {\n  if (!settings.stats && constants_1.IS_SUPPORT_READDIR_WITH_FILE_TYPES) {\n    readdirWithFileTypes(directory, settings, callback);\n    return;\n  }\n\n  readdir(directory, settings, callback);\n}\n\nexports.read = read;\n\nfunction readdirWithFileTypes(directory, settings, callback) {\n  settings.fs.readdir(directory, {\n    withFileTypes: true\n  }, (readdirError, dirents) => {\n    if (readdirError !== null) {\n      callFailureCallback(callback, readdirError);\n      return;\n    }\n\n    const entries = dirents.map(dirent => ({\n      dirent,\n      name: dirent.name,\n      path: common.joinPathSegments(directory, dirent.name, settings.pathSegmentSeparator)\n    }));\n\n    if (!settings.followSymbolicLinks) {\n      callSuccessCallback(callback, entries);\n      return;\n    }\n\n    const tasks = entries.map(entry => makeRplTaskEntry(entry, settings));\n    rpl(tasks, (rplError, rplEntries) => {\n      if (rplError !== null) {\n        callFailureCallback(callback, rplError);\n        return;\n      }\n\n      callSuccessCallback(callback, rplEntries);\n    });\n  });\n}\n\nexports.readdirWithFileTypes = readdirWithFileTypes;\n\nfunction makeRplTaskEntry(entry, settings) {\n  return done => {\n    if (!entry.dirent.isSymbolicLink()) {\n      done(null, entry);\n      return;\n    }\n\n    settings.fs.stat(entry.path, (statError, stats) => {\n      if (statError !== null) {\n        if (settings.throwErrorOnBrokenSymbolicLink) {\n          done(statError);\n          return;\n        }\n\n        done(null, entry);\n        return;\n      }\n\n      entry.dirent = utils.fs.createDirentFromStats(entry.name, stats);\n      done(null, entry);\n    });\n  };\n}\n\nfunction readdir(directory, settings, callback) {\n  settings.fs.readdir(directory, (readdirError, names) => {\n    if (readdirError !== null) {\n      callFailureCallback(callback, readdirError);\n      return;\n    }\n\n    const tasks = names.map(name => {\n      const path = common.joinPathSegments(directory, name, settings.pathSegmentSeparator);\n      return done => {\n        fsStat.stat(path, settings.fsStatSettings, (error, stats) => {\n          if (error !== null) {\n            done(error);\n            return;\n          }\n\n          const entry = {\n            name,\n            path,\n            dirent: utils.fs.createDirentFromStats(name, stats)\n          };\n\n          if (settings.stats) {\n            entry.stats = stats;\n          }\n\n          done(null, entry);\n        });\n      };\n    });\n    rpl(tasks, (rplError, entries) => {\n      if (rplError !== null) {\n        callFailureCallback(callback, rplError);\n        return;\n      }\n\n      callSuccessCallback(callback, entries);\n    });\n  });\n}\n\nexports.readdir = readdir;\n\nfunction callFailureCallback(callback, error) {\n  callback(error);\n}\n\nfunction callSuccessCallback(callback, result) {\n  callback(null, result);\n}","map":{"version":3,"sources":["C:/Users/DELL/Desktop/Trainig/MERN-stack/client/node_modules/@nodelib/fs.scandir/out/providers/async.js"],"names":["Object","defineProperty","exports","value","readdir","readdirWithFileTypes","read","fsStat","require","rpl","constants_1","utils","common","directory","settings","callback","stats","IS_SUPPORT_READDIR_WITH_FILE_TYPES","fs","withFileTypes","readdirError","dirents","callFailureCallback","entries","map","dirent","name","path","joinPathSegments","pathSegmentSeparator","followSymbolicLinks","callSuccessCallback","tasks","entry","makeRplTaskEntry","rplError","rplEntries","done","isSymbolicLink","stat","statError","throwErrorOnBrokenSymbolicLink","createDirentFromStats","names","fsStatSettings","error","result"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.readdir = exports.readdirWithFileTypes = exports.read = void 0;\nconst fsStat = require(\"@nodelib/fs.stat\");\nconst rpl = require(\"run-parallel\");\nconst constants_1 = require(\"../constants\");\nconst utils = require(\"../utils\");\nconst common = require(\"./common\");\nfunction read(directory, settings, callback) {\n    if (!settings.stats && constants_1.IS_SUPPORT_READDIR_WITH_FILE_TYPES) {\n        readdirWithFileTypes(directory, settings, callback);\n        return;\n    }\n    readdir(directory, settings, callback);\n}\nexports.read = read;\nfunction readdirWithFileTypes(directory, settings, callback) {\n    settings.fs.readdir(directory, { withFileTypes: true }, (readdirError, dirents) => {\n        if (readdirError !== null) {\n            callFailureCallback(callback, readdirError);\n            return;\n        }\n        const entries = dirents.map((dirent) => ({\n            dirent,\n            name: dirent.name,\n            path: common.joinPathSegments(directory, dirent.name, settings.pathSegmentSeparator)\n        }));\n        if (!settings.followSymbolicLinks) {\n            callSuccessCallback(callback, entries);\n            return;\n        }\n        const tasks = entries.map((entry) => makeRplTaskEntry(entry, settings));\n        rpl(tasks, (rplError, rplEntries) => {\n            if (rplError !== null) {\n                callFailureCallback(callback, rplError);\n                return;\n            }\n            callSuccessCallback(callback, rplEntries);\n        });\n    });\n}\nexports.readdirWithFileTypes = readdirWithFileTypes;\nfunction makeRplTaskEntry(entry, settings) {\n    return (done) => {\n        if (!entry.dirent.isSymbolicLink()) {\n            done(null, entry);\n            return;\n        }\n        settings.fs.stat(entry.path, (statError, stats) => {\n            if (statError !== null) {\n                if (settings.throwErrorOnBrokenSymbolicLink) {\n                    done(statError);\n                    return;\n                }\n                done(null, entry);\n                return;\n            }\n            entry.dirent = utils.fs.createDirentFromStats(entry.name, stats);\n            done(null, entry);\n        });\n    };\n}\nfunction readdir(directory, settings, callback) {\n    settings.fs.readdir(directory, (readdirError, names) => {\n        if (readdirError !== null) {\n            callFailureCallback(callback, readdirError);\n            return;\n        }\n        const tasks = names.map((name) => {\n            const path = common.joinPathSegments(directory, name, settings.pathSegmentSeparator);\n            return (done) => {\n                fsStat.stat(path, settings.fsStatSettings, (error, stats) => {\n                    if (error !== null) {\n                        done(error);\n                        return;\n                    }\n                    const entry = {\n                        name,\n                        path,\n                        dirent: utils.fs.createDirentFromStats(name, stats)\n                    };\n                    if (settings.stats) {\n                        entry.stats = stats;\n                    }\n                    done(null, entry);\n                });\n            };\n        });\n        rpl(tasks, (rplError, entries) => {\n            if (rplError !== null) {\n                callFailureCallback(callback, rplError);\n                return;\n            }\n            callSuccessCallback(callback, entries);\n        });\n    });\n}\nexports.readdir = readdir;\nfunction callFailureCallback(callback, error) {\n    callback(error);\n}\nfunction callSuccessCallback(callback, result) {\n    callback(null, result);\n}\n"]},"metadata":{},"sourceType":"script"}